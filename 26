---Statement 26  
Use MobileNet architecture  perform transfer learning on the Cats and Dogs dataset, and evaluate 
model performance using a classification report. 

import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import classification_report
import numpy as np

# 1. Load and prepare the dataset
IMG_SIZE = 160
BATCH_SIZE = 32

(train_ds, val_ds), dataset_info = tf.keras.utils.image_dataset_from_directory(
    directory=tf.keras.utils.get_file(
        'cats_and_dogs_filtered.zip',
        origin='https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip',
        extract=True
    ).replace('cats_and_dogs_filtered.zip', 'cats_and_dogs_filtered'),
    validation_split=0.2,
    subset='both',
    seed=123,
    image_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE
)

# 2. Normalize images
normalization_layer = tf.keras.layers.Rescaling(1. / 255)
train_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
val_ds = val_ds.map(lambda x, y: (normalization_layer(x), y))

# 3. Load MobileNetV2 without top layers
base_model = MobileNetV2(input_shape=(IMG_SIZE, IMG_SIZE, 3),
                         include_top=False,
                         weights='imagenet')
base_model.trainable = False  # Freeze the base model

# 4. Add custom classifier on top
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(64, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)  # Binary classification

model = Model(inputs=base_model.input, outputs=predictions)

# 5. Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# 6. Train the model
history = model.fit(train_ds, validation_data=val_ds, epochs=5)

# 7. Generate classification report
# Prepare test data
y_true = []
y_pred = []

for images, labels in val_ds:
    preds = model.predict(images)
    preds = np.round(preds).astype(int).flatten()
    y_pred.extend(preds)
    y_true.extend(labels.numpy())

# Classification report
print("\nClassification Report:\n")
print(classification_report(y_true, y_pred, target_names=["Cat", "Dog"]))
