# Use a batch size of 64 and learning rate of 0.001 to train a DNN on the UCI dataset. Document training accuracy and loss.

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.optimizers import Adam

# Load UCI dataset (replace with your path)
data = pd.read_csv('/path/to/uci_dataset.csv')

# Assuming last column is target, rest are features
X = data.iloc[:, :-1].values
y = data.iloc[:, -1].values

# Encode target if categorical
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Number of classes (binary or multiclass)
num_classes = len(np.unique(y_encoded))

# One-hot encode if multiclass
if num_classes > 2:
    y_encoded = tf.keras.utils.to_categorical(y_encoded, num_classes)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(
    X, y_encoded, test_size=0.2, random_state=42
)

# Scale features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Build model
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(num_classes if num_classes > 2 else 1,
          activation='softmax' if num_classes > 2 else 'sigmoid')
])

# Compile model with Adam and lr=0.001
model.compile(
    optimizer=Adam(learning_rate=0.001),
    loss='categorical_crossentropy' if num_classes > 2 else 'binary_crossentropy',
    metrics=['accuracy']
)

# Train model with batch size 64
history = model.fit(
    X_train, y_train,
    epochs=20,
    batch_size=64,
    verbose=2,
    validation_split=0.1
)

# Print training accuracy and loss
train_acc = history.history['accuracy'][-1]
train_loss = history.history['loss'][-1]

print(f"Final Training Accuracy: {train_acc:.4f}")
print(f"Final Training Loss: {train_loss:.4f}")
