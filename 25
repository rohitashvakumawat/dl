---Statement 25 
Use LeNet architecture to classify the Cats and Dogs dataset, and plot training loss and accuracy 
curves.

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, AveragePooling2D, Flatten, Dense
import matplotlib.pyplot as plt

# 1. Load and prepare Cats vs Dogs dataset
IMG_SIZE = (64, 64)  # LeNet uses small inputs
BATCH_SIZE = 32

dataset_url = "https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip"
path_to_zip = tf.keras.utils.get_file('cats_and_dogs_filtered.zip', origin=dataset_url, extract=True)
dataset_dir = path_to_zip.replace("cats_and_dogs_filtered.zip", "cats_and_dogs_filtered")

train_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_dir + "/train",
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE
)

val_ds = tf.keras.utils.image_dataset_from_directory(
    dataset_dir + "/validation",
    image_size=IMG_SIZE,
    batch_size=BATCH_SIZE
)

# Normalize images
normalization_layer = tf.keras.layers.Rescaling(1./255)
train_ds = train_ds.map(lambda x, y: (normalization_layer(x), y))
val_ds = val_ds.map(lambda x, y: (normalization_layer(x), y))

# 2. Define LeNet architecture
model = Sequential([
    Conv2D(6, kernel_size=(5, 5), activation='relu', input_shape=(64, 64, 3), padding='same'),
    AveragePooling2D(),
    Conv2D(16, kernel_size=(5, 5), activation='relu'),
    AveragePooling2D(),
    Flatten(),
    Dense(120, activation='relu'),
    Dense(84, activation='relu'),
    Dense(1, activation='sigmoid')  # Binary output (cat or dog)
])

# 3. Compile the model
model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=['accuracy'])

# 4. Train the model
history = model.fit(train_ds, validation_data=val_ds, epochs=10)

# 5. Plot training & validation loss and accuracy
plt.figure(figsize=(12, 5))

# Accuracy
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

# Loss
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.tight_layout()
plt.grid(True)
plt.show()
